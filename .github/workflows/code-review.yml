name: "[STIG] Automated Code Review"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  # PowerShell Static Analysis
  powershell-analysis:
    name: "[ANALYSIS] PowerShell Code Analysis"
    runs-on: windows-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: "[INFO] Checkout Repository"
        uses: actions/checkout@v4

      - name: "[ADMIN] Setup PowerShell and PSScriptAnalyzer"
        shell: powershell
        run: |
          Write-Host "[RUNNING] Installing PSScriptAnalyzer..." -ForegroundColor Yellow
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          Write-Host "[SUCCESS] PSScriptAnalyzer installed" -ForegroundColor Green

      - name: "[RUNNING] Run PowerShell Static Analysis"
        shell: powershell
        run: |
          Write-Host "[ANALYSIS] Running PSScriptAnalyzer..." -ForegroundColor Cyan

          # Run analysis on PowerShell files only
          $results = Invoke-ScriptAnalyzer -Path . -Recurse -ReportSummary -Settings PSGallery -Include "*.ps1"

          if ($results) {
            $results | Export-Csv -Path "pssa-results.csv" -NoTypeInformation

            Write-Host "[SUMMARY] PSScriptAnalyzer Results:" -ForegroundColor Cyan
            $summary = $results | Group-Object Severity
            foreach ($group in $summary) {
              $color = switch ($group.Name) {
                'Error' { 'Red' }
                'Warning' { 'Yellow' }
                'Information' { 'Blue' }
                default { 'White' }
              }
              Write-Host "  $($group.Name): $($group.Count)" -ForegroundColor $color
            }

            # Show critical errors
            $errors = $results | Where-Object { $_.Severity -eq 'Error' }
            if ($errors) {
              Write-Host "[ERROR] Critical issues found:" -ForegroundColor Red
              $errors | ForEach-Object {
                Write-Host "  $($_.ScriptName):$($_.Line) - $($_.Message)" -ForegroundColor Red
              }
              exit 1
            }
          } else {
            Write-Host "[SUCCESS] No PSScriptAnalyzer issues found" -ForegroundColor Green
          }

      - name: "[REPORT] Upload Analysis Results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pssa-results
          path: pssa-results.csv

  # Security Scanning (PowerShell focused)
  security-scan:
    name: "[SECURITY] PowerShell Security Scan"
    runs-on: windows-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: "[INFO] Checkout Repository"
        uses: actions/checkout@v4

      - name: "[SECURITY] PowerShell Security Analysis"
        shell: powershell
        run: |
          Write-Host "[SECURITY] Scanning for PowerShell security issues..." -ForegroundColor Cyan

          $securityIssues = @()
          $scriptFiles = Get-ChildItem -Recurse -Filter "*.ps1"

          foreach ($file in $scriptFiles) {
            $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
            if (-not $content) { continue }

            # Check for high-risk patterns specific to PowerShell
            $highRiskPatterns = @{
              'Invoke-Expression|iex\s' = 'Dynamic code execution'
              'DownloadString|DownloadFile' = 'Web content download'
              'Start-Process.*-WindowStyle\s+Hidden' = 'Hidden process execution'
              'Set-ExecutionPolicy.*Unrestricted' = 'Unsafe execution policy'
              'ConvertTo-SecureString.*-AsPlainText.*-Force' = 'Insecure password handling'
              'System\.Runtime\.InteropServices' = 'Unsafe native code calls'
            }

            foreach ($pattern in $highRiskPatterns.Keys) {
              if ($content -match $pattern) {
                $securityIssues += @{
                  File = $file.FullName
                  Issue = $highRiskPatterns[$pattern]
                  Pattern = $pattern
                }
              }
            }
          }

          if ($securityIssues.Count -gt 0) {
            Write-Host "[WARNING] Security concerns found:" -ForegroundColor Yellow
            $securityIssues | ForEach-Object {
              Write-Host "  $($_.File): $($_.Issue)" -ForegroundColor Yellow
            }

            # Export for review but don't fail build
            $securityIssues | ConvertTo-Json | Out-File "security-findings.json"
          } else {
            Write-Host "[SUCCESS] No critical security issues detected" -ForegroundColor Green
          }

      - name: "[REPORT] Upload Security Findings"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-findings
          path: security-findings.json
