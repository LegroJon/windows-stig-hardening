name: STIG Quality Gate

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  unicode-check:
    name: Unicode Character Validation
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Check for Unicode characters
        shell: pwsh
        run: |
          Write-Host "Checking for Unicode characters in PowerShell files..." -ForegroundColor Cyan

          $unicodeFound = $false
          $psFiles = Get-ChildItem -Path . -Filter "*.ps1" -Recurse | Where-Object { $_.FullName -notlike "*node_modules*" }

          foreach ($file in $psFiles) {
            $content = Get-Content $file.FullName -Raw -Encoding UTF8
            $matches = [regex]::Matches($content, '[^\x00-\x7F]')

            if ($matches.Count -gt 0) {
              $unicodeFound = $true
              Write-Host "❌ Unicode found in $($file.FullName):" -ForegroundColor Red
              foreach ($match in $matches) {
                $lineNum = ($content.Substring(0, $match.Index) -split "`n").Count
                Write-Host "  Line $lineNum : '$($match.Value)'" -ForegroundColor Yellow
              }
            }
          }

          if ($unicodeFound) {
            Write-Host "FAILED: Unicode characters must be replaced with ASCII equivalents" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "✅ No Unicode characters found" -ForegroundColor Green
          }

  ascii-prefix-check:
    name: ASCII Prefix Validation
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validate ASCII prefixes
        shell: pwsh
        run: |
          Write-Host "Validating ASCII prefixes in Write-Host statements..." -ForegroundColor Cyan

          $validPrefixes = @("[STIG]", "[SUCCESS]", "[ERROR]", "[WARNING]", "[INFO]", "[ADMIN]", "[SECURITY]", "[RUNNING]", "[REPORT]", "[SUMMARY]", "[NEXT]", "[MANUAL]", "[RETRY]", "[COMPLETE]")
          $issuesFound = $false

          $psFiles = Get-ChildItem -Path . -Filter "*.ps1" -Recurse | Where-Object { $_.FullName -notlike "*node_modules*" }

          foreach ($file in $psFiles) {
            $content = Get-Content $file.FullName -Raw
            $writeHostPattern = 'Write-Host\s+"([^"]*)"'
            $matches = [regex]::Matches($content, $writeHostPattern)

            foreach ($match in $matches) {
              $message = $match.Groups[1].Value.Trim()

              if ($message -and -not ($message -match "^\s*$")) {
                $hasValidPrefix = $false
                foreach ($prefix in $validPrefixes) {
                  if ($message.StartsWith($prefix)) {
                    $hasValidPrefix = $true
                    break
                  }
                }

                if (-not $hasValidPrefix) {
                  $issuesFound = $true
                  $lineNum = ($content.Substring(0, $match.Index) -split "`n").Count
                  Write-Host "❌ Invalid prefix in $($file.FullName) line $lineNum : '$message'" -ForegroundColor Red
                }
              }
            }
          }

          if ($issuesFound) {
            Write-Host "FAILED: Use approved ASCII prefixes only" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "✅ All Write-Host statements use proper ASCII prefixes" -ForegroundColor Green
          }
