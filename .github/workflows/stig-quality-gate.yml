name: "[STIG] Quality Gate - ASCII Standards"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  # STIG-specific ASCII prefix validation (unique functionality)
  ascii-prefix-check:
    name: "[VALIDATION] ASCII Prefix Standards"
    runs-on: windows-latest

    steps:
      - name: "[INFO] Checkout Repository"
        uses: actions/checkout@v4

      - name: "[RUNNING] Validate ASCII Prefixes"
        shell: powershell
        run: |
          Write-Host "[RUNNING] Validating ASCII prefixes in Write-Host statements..." -ForegroundColor Cyan

          # STIG-approved ASCII prefixes only
          $validPrefixes = @(
            "[STIG]", "[SUCCESS]", "[ERROR]", "[WARNING]", "[INFO]",
            "[ADMIN]", "[SECURITY]", "[RUNNING]", "[REPORT]", "[SUMMARY]",
            "[NEXT]", "[MANUAL]", "[RETRY]", "[COMPLETE]", "[ANALYSIS]",
            "[VALIDATION]", "[STATS]", "[QUICK]", "[COMMENT]", "[BUILD]",
            "[TESTING]", "[VALIDATOR]", "[SCANNER]"
          )

          $issuesFound = $false
          $filesChecked = 0

          $psFiles = Get-ChildItem -Path . -Filter "*.ps1" -Recurse | Where-Object {
            $_.FullName -notlike "*node_modules*" -and
            $_.FullName -notlike "*logs*" -and
            $_.FullName -notlike "*reports*"
          }

          foreach ($file in $psFiles) {
            $filesChecked++
            $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
            if (-not $content) { continue }

            # Match Write-Host statements with quoted strings
            $writeHostPattern = 'Write-Host\s+"([^"]*)"'
            $matches = [regex]::Matches($content, $writeHostPattern, [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)

            foreach ($match in $matches) {
              $message = $match.Groups[1].Value.Trim()

              # Skip empty messages, variable interpolations, or short messages
              if ($message -and -not ($message -match "^\s*$") -and -not ($message.StartsWith('$')) -and $message.Length -gt 5) {
                $hasValidPrefix = $false
                foreach ($prefix in $validPrefixes) {
                  if ($message.StartsWith($prefix)) {
                    $hasValidPrefix = $true
                    break
                  }
                }

                if (-not $hasValidPrefix) {
                  $issuesFound = $true
                  $lineNum = ($content.Substring(0, $match.Index) -split "`n").Count
                  Write-Host "[ERROR] Invalid prefix in $($file.Name) line $lineNum" -ForegroundColor Red
                  Write-Host "  Message: '$message'" -ForegroundColor Yellow
                  Write-Host "  Use one of: $($validPrefixes -join ', ')" -ForegroundColor Cyan
                }
              }
            }
          }

          Write-Host "[INFO] Checked $filesChecked PowerShell files for ASCII prefix compliance" -ForegroundColor Cyan

          if ($issuesFound) {
            Write-Host "[ERROR] FAILED: Use approved ASCII prefixes only" -ForegroundColor Red
            Write-Host "[MANUAL] Refer to .github/copilot-instructions.md for standards" -ForegroundColor Yellow
            exit 1
          } else {
            Write-Host "[SUCCESS] All Write-Host statements use proper ASCII prefixes" -ForegroundColor Green
          }
